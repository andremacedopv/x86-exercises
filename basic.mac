; Basic Functions Library for IA-32
;---------------------------------------------------------

; Extern Definitions
extern  func_NewLine,func_PrintChar,func_PrintSpace
extern  func_PrintCharArray,func_PrintString,func_ReadChar
extern  func_PrintLongInt,func_PrintShortInt,func_PrintByteInt
extern  func_Print64Int, func_waitForEnter, func_ReadStr, func_flush

;---------------------------------------------------------

; Macro Definitions

; Macro to Stack all data and index registers
%macro  stackReg    0
    pushad
%endmacro

; Macro to Unstack all data and index registers
%macro  unstackReg  0
    popad
%endmacro

; Macro to start a program with global label
%macro  start       0
    section .text
    global _start
    _start:
%endmacro

%macro  start_c     0
    section .text
    global main
    main:
%endmacro

; Macro to finish a pÅ•ogram
%macro  finishExec  0
    mov eax,1
    mov ebx,0
    int 80h
%endmacro

; Macro to print a new line
%macro  newLine     0
    stackReg
    call    func_NewLine
    unstackReg
%endmacro

; Macro to flush terminal input
%macro  Flush       0
    stackReg
    call    func_flush
    unstackReg
%endmacro

; Macro to wait for an enter char
%macro  waitForEnter     0
    stackReg
    call    func_waitForEnter
    unstackReg
%endmacro

; Macro to print a space
%macro  printSpace  0
    stackReg
    call    func_PrintSpace
    unstackReg
%endmacro

; Macro to print a char
; Parameter 1 - Char Location
%macro  printChar   1
    stackReg
    push    %1
    call    func_PrintChar
    unstackReg
%endmacro

; Macro to print a string of known size
; Parameter 1 - String Location
; Parameter 2 - String Size (DWORD)
%macro  printStr    2
    stackReg
    push    %1
    push    DWORD %2
    call    func_PrintCharArray
    unstackReg
%endmacro

; Macro to print a string ending on zero
; Parameter 1 - String Location
%macro  printStr    1
    stackReg
    push    %1
    call    func_PrintString
    unstackReg
%endmacro

; Macro to read a char
; Parameter 1 - Where to Put the Char (Can be any general use register or memory with [])
%macro  readChar    1
    push    eax
    push    DWORD 0
    call    func_ReadChar
    pop     eax
    %ifidni     %1,AL
        add     esp, 4
    %elifidni   %1,AH
        mov     ah,al
        mov     al,0
        add     esp, 4
    %elifidni   %1,AX
        add     esp, 4
    %elifidni   %1,EAX
        add     esp, 4
    %elifidni   %1,BL
        mov     bl,al
        pop     eax
    %elifidni   %1,BH
        mov     bh,al
        pop     eax
    %elifidni   %1,BX
        mov     bx,eax
        pop     eax
    %elifidni   %1,EBX
        mov     ebx,eax
        pop     eax
    %elifidni   %1,CL
        mov     cl,al
        pop     eax
    %elifidni   %1,CH
        mov     ch,al
        pop     eax
    %elifidni   %1,CX
        mov     cx,eax
        pop     eax
    %elifidni   %1,ECX
        mov     ecx,eax
        pop     eax
    %elifidni   %1,DL
        mov     dl,al
        pop     eax
    %elifidni   %1,DH
        mov     dh,al
        pop     eax
    %elifidni   %1,DX
        mov     dx,eax
        pop     eax
    %elifidni   %1,EDX
        mov     edx,eax
        pop     eax
    %else
        mov     %1,al
        pop     eax
    %endif
%endmacro

; Macro to read a string
; Parameter 1 - Where to Put the String (Memory pointer)
; Parameter 2 - Maximum size to be read (number) -> You should leave a space for a ending 0
; Parameter 3 - Where to put lenght read ('NONE' to ignore )
%macro  readStr    3
    stackReg
    push    eax
    push    DWORD 0
    push    DWORD %1
    push    DWORD %2
    call    func_ReadStr
    pop eax
    %ifidni     %3,AL
        add     esp, 4
    %elifidni   %3,AH
        mov     ah,al
        mov     al,0
        add     esp, 4
    %elifidni   %3,AX
        add     esp, 4
    %elifidni   %3,EAX
        add     esp, 4
    %elifidni   %3,BL
        mov     bl,al
        pop     eax
    %elifidni   %3,BH
        mov     bh,al
        pop     eax
    %elifidni   %3,BX
        mov     bx,eax
        pop     eax
    %elifidni   %3,EBX
        mov     ebx,eax
        pop     eax
    %elifidni   %3,CL
        mov     cl,al
        pop     eax
    %elifidni   %3,CH
        mov     ch,al
        pop     eax
    %elifidni   %3,CX
        mov     cx,eax
        pop     eax
    %elifidni   %3,ECX
        mov     ecx,eax
        pop     eax
    %elifidni   %3,DL
        mov     dl,al
        pop     eax
    %elifidni   %3,DH
        mov     dh,al
        pop     eax
    %elifidni   %3,DX
        mov     dx,eax
        pop     eax
    %elifidni   %3,EDX
        mov     edx,eax
        pop     eax
    %else
        mov     [%3],al
        pop     eax
    %endif
%endmacro

; Macro to print an integer
; Parameter 1 - Register with integer or size especification for memory access (DWORD, WORD or BYTE)
; Parameter 2 - (Only in Memory Access) Location of integer on memory
%macro  printInt    1-2
    stackReg
    %ifidni     %1,AL
        and     eax,0x000000FF
        push    eax
        call    func_PrintByteInt
    %elifidni   %1,AH
        mov     al,ah
        and     eax,0x000000FF
        push    eax
        call    func_PrintByteInt
    %elifidni   %1,AX
        and     eax,0x0000FFFF
        push    eax
        call    func_PrintShortInt
    %elifidni   %1,EAX
        push    eax
        call    func_PrintLongInt
    %elifidni   %1,BL
        and     ebx,0x000000FF
        push    ebx
        call    func_PrintByteInt
    %elifidni   %1,BH
        mov     bl,bh
        and     ebx,0x000000FF
        push    ebx
        call    func_PrintByteInt
    %elifidni   %1,BX
        and     ebx,0x0000FFFF
        push    ebx
        call    func_PrintShortInt
    %elifidni   %1,EBX
        push    ebx
        call    func_PrintLongInt
    %elifidni   %1,CL
        and     ecx,0x000000FF
        push    ecx
        call    func_PrintByteInt
    %elifidni   %1,CH
        mov     cl,ch
        and     ecx,0x000000FF
        push    ecx
        call    func_PrintByteInt
    %elifidni   %1,CX
        and     ecx,0x0000FFFF
        push    ecx
        call    func_PrintShortInt
    %elifidni   %1,ECX
        push    ecx
        call    func_PrintLongInt
    %elifidni   %1,DL
        and     edx,0x000000FF
        push    edx
        call    func_PrintByteInt
    %elifidni   %1,DH
        mov     dl,dh
        and     edx,0x000000FF
        push    edx
        call    func_PrintByteInt
    %elifidni   %1,DX
        and     edx,0x0000FFFF
        push    edx
        call    func_PrintShortInt
    %elifidni   %1,EDX
        push    edx
        call    func_PrintLongInt
    %elifidni   %1,BYTE
        sub     eax,eax
        mov     byte al,[%2]
        push    eax
        call    func_PrintByteInt
    %elifidni   %1,WORD
        sub     eax,eax
        mov     ax,[%2]
        push    eax
        call    func_PrintShortInt
    %elifidni   %1,DWORD
        mov     eax,[%2]
        push    eax
        call    func_PrintLongInt
    %else
    %endif
    unstackReg
%endmacro

; Macro to print an 64 integer
; Parameter 1 - Location of most significant byte (memory without [])
; Parameter 2 - Location of least significant byte (memory without [])
%macro  print64Int    2
    stackReg
    %ifidni   %1,EAX
        push    eax
    %elifidni   %1,EBX
        push    ebx
    %elifidni   %1,ECX
        push    ecx
    %elifidni   %1,EDX
        push    edx
    %else
        mov     eax,[%1]
        push    eax
    %endif
    
    %ifidni   %2,EAX
        push    eax
    %elifidni   %2,EBX
        push    ebx
    %elifidni   %2,ECX
        push    ecx
    %elifidni   %2,EDX
        push    edx
    %else
        mov     eax,[%2]
        push    eax
    %endif

    call    func_Print64Int
    unstackReg
%endmacro
